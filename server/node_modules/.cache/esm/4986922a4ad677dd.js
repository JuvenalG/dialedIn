let mongoose,bcrypt;_4ad‍.x([["default",()=>_4ad‍.o]]);_4ad‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_4ad‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const { Schema } = mongoose;

const userSchema = new Schema(
  {
    name: {
      type: String,
      trim: true,
      required: "Name is required",
    },
    email: {
      type: String,
      trim: true,
      required: "Email is required",
      unique: true,
    },
    name: {
      type: String,
      trim: true,
      required: "Name is required",
    },
    password: {
      type: String,
      trim: true,
      required: "Name is required",
      min: 6,
      max: 64,
    },
    stripe_account_id: "",
    stripe_seller: {},
    stripeSession: {},
  },
  { timestamps: true }
);

//use 'pre' middleware to hash passwords, should also hash when updating password

userSchema.pre("save", function (next) {
  let user = this;
  if (user.isModified("password")) {
    return bcrypt.hash(user.password, 12, function (err, hash) {
      //12 sa;lt value usually 8-16
      if (err) {
        _4ad‍.g.console.log("Bcrypt HASH ERR", err);
        return next(err);
      }
      user.password = hash;
      return next();
    });
  } else {
    return next();
  }
});

userSchema.methods.comparePassword = function (password, next) {
  bcrypt.compare(password, this.password, function (err, match) {
    if (err) {
      _4ad‍.g.console.log("COMPARE PASSWORD ERR", err);
      return next(err, false);
    }
    //if no err, null returned
    _4ad‍.g.console.log("MATCH PASSWORD", match);
    return next(null, match);
  });
};

_4ad‍.d(mongoose.model("User", userSchema));
